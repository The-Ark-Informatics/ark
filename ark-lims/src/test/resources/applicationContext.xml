<?xml version="1.0" encoding="UTF-8"?>
	<!--
		~ Licensed to the Apache Software Foundation (ASF) under one ~ or more
		contributor license agreements. See the NOTICE file ~ distributed with
		this work for additional information ~ regarding copyright ownership.
		The ASF licenses this file ~ to you under the Apache License, Version
		2.0 (the ~ "License"); you may not use this file except in compliance
		~ with the License. You may obtain a copy of the License at ~ ~
		http://www.apache.org/licenses/LICENSE-2.0 ~ ~ Unless required by
		applicable law or agreed to in writing, ~ software distributed under
		the License is distributed on an ~ "AS IS" BASIS, WITHOUT WARRANTIES
		OR CONDITIONS OF ANY ~ KIND, either express or implied. See the
		License for the ~ specific language governing permissions and
		limitations ~ under the License.
	-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util/spring-util-3.0.xsd"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd 
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- Enable annotation configuration -->
	<context:annotation-config />
	
	<!-- Enable Ark properties -->
	<context:property-placeholder location="file:src/test/resources/application.properties"/>

	<!--  Belongs to the Ark Container Application -->
	<context:component-scan base-package="au.org.theark.dao" />
	<context:component-scan base-package="au.org.theark.service" />
	<context:component-scan base-package="au.org.theark.security" />

	<!-- Imports the sub-module contexts (dynamically) -->
	<!-- If they're in a JAR in WEB-INF/lib the following will work: -->
	<import resource="classpath*:/META-INF/services/sub-module.ctx.xml" />

	<!--
		Spring AOP auto-proxy creation (required to support Shiro annotations)
	-->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />

	<!--  reCAPTCHA configuration -->
	<!--
		NOTE: reCaptcha configurations require a public key and private key
		These keys are different depending on the domain where your
		application is deployed (by default works for any key when using
		localhost domain). You can generate keys here:
		https://www.google.com/recaptcha/admin/create THe following keys are
		for the domain: http://the-ark.org.au
	-->
	<bean id="reCaptchaContextSource" class="au.org.theark.core.dao.ReCaptchaContextSource">
		<property name="reCaptchaPublicKey" value="6LeH1soSAAAAAFJDIJlP3sjPiHu7QMTxVmYuxX_M" />
		<property name="reCaptchaPrivateKey" value="6LeH1soSAAAAAHo5FTWfUzS5AQZ6Jea-9dBVtuyL" />
	</bean>

	<!-- SMTP Configuration -->
	<!--   
		NOTE: host will now use "ark-smtp" mapping as defined in the host
		file.
	-->
	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="ark-smtp" />
		<!-- Parameters for SMTP AUTH Using Google-->
		<property name="username" value="usernam@gmail.com"/>
		<property name="password" value="#insert-ultra-secure-password-here#" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<!-- used by gmail smtp server -->
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>

	<!--   velocity allows us to use a template for the email-->
	<bean id="velocityEngine"
		class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
		<property name="velocityProperties">
			<value>
				resource.loader=class
				class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
			</value>
		</property>
	</bean>

	<!--  MySql Data Source -->
	<!--
		NOTE: URL will now use "ark-database" mapping as defined in the host
		file.
	-->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.h2.Driver"/>
		<property name="url" value="jdbc:h2:mem:testdb;MODE=MySQL;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;IGNORECASE=TRUE;INIT=CREATE SCHEMA IF NOT EXISTS ADMIN\;CREATE SCHEMA IF NOT EXISTS AUDIT\; CREATE SCHEMA IF NOT EXISTS CONFIG\; CREATE SCHEMA IF NOT EXISTS DISEASE\; CREATE SCHEMA IF NOT EXISTS GENO\; CREATE SCHEMA IF NOT EXISTS LIMS\; CREATE SCHEMA IF NOT EXISTS PHENO\; CREATE SCHEMA IF NOT EXISTS REPORTING\; CREATE SCHEMA IF NOT EXISTS SPARK\; CREATE SCHEMA IF NOT EXISTS STUDY;" />
	</bean>

	<!--  Ark LDAP configuration (includes the LDAP data source) -->
	<!--
		NOTE: URL will now use "ark-ldap" mapping as defined in the host file.
		NOTE: No longer required to update LDAP details in sub-module.ctx.xml,
		it has been centralised to the follow
		au.org.theark.core.dao.ArkLdapContextSource
	-->
	<bean id="ldapDataContextSource" class="au.org.theark.core.dao.ArkLdapContextSource">
		<property name="url" value="ldap://ark-ldap:389" />
		<property name="basePeopleDn" value="ou=arkUsers" />
		<property name="base" value="dc=the-ark,dc=org,dc=au" />
		<property name="userDn" value="cn=admin,dc=the-ark,dc=org,dc=au" />
		<property name="password" value="password" />
	</bean>

	<!-- Shibboleth service provider -->
	<bean id="shibbolethServiceProvider"
		class="au.org.theark.core.dao.ArkShibbolethServiceProviderContextSource">
		<!-- Handler URL for Service providor -->
		<!-- NOTE: MUST BE CHANGED TO HOSTNAME OF SERVER -->
		<property name="handlerUrl" value="https://test.the-ark.org.au/Shibboleth.sso" />
		<!--
			Extension service that generates "approximate" metadata based on SP
			configuration.
		-->
		<property name="metadataGenerator" value="/Metadata" />
		<!-- Status reporting service. -->
		<property name="status" value="/Status" />
		<!-- Session diagnostic service. -->
		<property name="session" value="/Session" />
		<!-- JSON feed of discovery information. -->
		<property name="discoveryFeed" value="/DiscoFeed" />
		<!-- Determines if Shibboleth actually configured/used -->
		<property name="useShibboleth" value="true" />
	</bean>

	<!--  Hibernate Session Factory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">

		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>au.org.theark.core.model.study.entity</value>
				<value>au.org.theark.core.model.pheno.entity</value>
				<value>au.org.theark.core.model.geno.entity</value>
				<value>au.org.theark.core.model.report.entity</value>
				<!-- <value>au.org.theark.registry.model.entity</value>-->
				<value>au.org.theark.core.model.lims.entity</value>
				<value>au.org.theark.core.model.audit.entity</value>
				<value>au.org.theark.core.model.worktracking.entity</value>
				<value>au.org.theark.core.model.disease.entity</value>
				<value>au.org.theark.core.model.config.entity</value>
				<value>au.org.theark.core.model.spark.entity</value>
				<value>au.org.theark.core.audit</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_comments">false</prop>

				<!--
					prop key="hibernate.">true</prop> <prop
					key="cache.use_query_cache">false</prop> <prop
					key="cache.use_second_level_cache">false</prop
				-->
				<prop key="hibernate.order_updates">true</prop>
				<prop key="hibernate.order_inserts">true</prop>
				<prop key="hibernate.jdbc.batch_size">50</prop>
				<prop key="hibernate.hbm2ddl.auto">create</prop>
            	<prop key="org.hibernate.envers.auditTablePrefix">AUD_</prop>
            	<prop key="org.hibernate.envers.auditTableSuffix"></prop>
            	<prop key="org.hibernate.envers.storeDataAtDelete">true</prop>
            	<prop key="org.hibernate.envers.default_schema">audit</prop>
				<!-- prop key="hibernate.jdbc.batch_versioned_data">true</prop -->
			</props>
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<tx:annotation-driven />

	<!--
		=====================Asynch Processing==============================
		-> <bean name="asynchSubjectUploadProcessor"
		class="au.org.theark.study.web.component.subjectUpload.AsynchSubjectUploadProcessor">
		<constructor-arg type="org.springframework.core.task.TaskExecutor"
		ref="taskExecutor" /> <constructor-arg
		type="au.org.theark.study.web.component.subjectUpload.UploadUtilities"
		ref="uploadUtilities"/> </bean> <!- TODO change to asynch processing
		-> <bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="2" /> <property
		name="maxPoolSize" value="4" /> <property name="queueCapacity"
		value="25" /> </bean>
	-->
	<!-- quartz scheduler related -->

	<!--
		jobs definitions <bean id="export2StatisticsJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject"> <ref bean="scheduledexportservice" />
		</property> <property name="targetMethod">
		<value>executeScheduledExportsIfAny</value> </property> </bean> <!- -
		cron trigger definitions example TODO delete <bean
		id="export2StatisticsTriggerBean"
		class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="export2StatisticsJob" /> <!- - run
		every day 5 minutes - -> <property name="cronExpression" value="0 0/5
		* * * ?" /> </bean> <!- - scheduler - -> <bean id="scheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers"> <list> <ref
		bean="export2StatisticsTriggerBean" /> </list> </property> </bean>
	-->





	<!--
		========================================================= Shiro
		Components =========================================================
	-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/" />
		<!--
			override these for application-specific URLs if you like: <property
			name="loginUrl" value="/login.jsp"/> <property name="successUrl"
			value="/home.jsp"/> <property name="unauthorizedUrl"
			value="/unauthorized.jsp"/>
		-->
		<!--
			The 'filters' property is not necessary since any declared
			javax.servlet.Filter bean
		-->
		<!--
			defined will be automatically acquired and available via its beanName
			in chain
		-->
		<!--
			definitions, but you can perform instance overrides or name aliases
			here if you like:
		-->
		<!--
			<property name="filters"> <util:map> <entry key="anAlias"
			value-ref="someFilter"/> </util:map> </property>
		-->
		<!--
			<property name="filterChainDefinitions"> <value> # some example chain
			definitions: /admin/** = authc, roles[admin] /docs/** = authc,
			perms[document:read] /** = authc # more URL-to-FilterChain
			definitions here </value> </property>
		-->
	</bean>

	<!--
		Shiro's main business-tier object for web-enabled applications (use
		org.apache.shiro.web.DefaultWebSecurityManager instead when there is
		no web environment)
	-->

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!--
			Single realm app (realm configured next, below). If you have multiple
			realms, use the 'realms' property instead. <property name="realm"
			ref="arkLdapRealm" />
		-->

		<property name="realms">
			<list>
				<ref bean="aafRealm" />
				<ref bean="arkLdapRealm" />
			</list>
		</property>

		<!--
			Uncomment this next property if you want heterogenous session access
			or clusterable/distributable sessions. The default value is 'http'
			which uses the Servlet container's HttpSession as the underlying
			Session implementation. <property name="sessionMode" value="shiro"/>
		-->
		<property name="cacheManager" ref="cacheManager" />
	</bean>

	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager" >
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>

	<bean id="ehCacheManager" class="net.sf.ehcache.CacheManager" />

	<bean id="arkLdapRealm" class="au.org.theark.core.security.ArkLdapRealm" />
	<bean id="aafRealm" class="au.org.theark.core.security.AAFRealm" />

	<!--
		Post processor that automatically invokes init() and destroy() methods
	-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
</beans>

